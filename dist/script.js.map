{"version":3,"sources":["script.js"],"names":["headernav","document","querySelector","headertoggle","headerclose","addEventListener","classList","add","remove","i","headerlink","querySelectorAll","removemenu","forEach","n","skillsContainer","getElementsByClassName","skillsHeader","toggleSkills","itemClass","this","parentNode","className","length","el","tabs","tableContent","scrollHeader","nav","getElementById","scrollY","scrollUp","tab","target","dataset","tabcont","window","themeButton","darkTheme","iconTheme","selectedTheme","localStorage","getItem","selectedIcon","getCurrentTheme","body","contains","getCurrentIcon","toggle","setItem"],"mappings":"AAAA,aAEA,IAAMA,UAAYC,SAASC,cAAc,gBACrCC,aAAeF,SAASC,cAAc,mBACtCE,YAAcH,SAASC,cAAc,kBAErCC,cACAA,aAAaE,iBAAiB,SAAS,WACnCL,UAAUM,UAAUC,IAAI,gBAI5BH,aACAA,YAAYC,iBAAiB,SAAS,WAClCL,UAAUM,UAAUE,OAAO,gBAKnC,IASIC,EATEC,WAAaT,SAASU,iBAAiB,iBAE7C,SAASC,aACLZ,UAAUM,UAAUE,OAAO,aAE/BE,WAAWG,SAAQ,SAACC,GAAD,OAAOA,EAAET,iBAAiB,QAASO,eAKtD,IAAMG,gBAAkBd,SAASe,uBAAuB,oBACpDC,aAAehB,SAASU,iBAAiB,mBAE7C,SAASO,eACL,IAAIC,EAAYC,KAAKC,WAAWC,UAChC,IAAKb,EAAI,EAAGA,EAAIM,gBAAgBQ,OAAQd,IACpCM,gBAAgBN,GAAGa,UAAY,iCAEjB,mCAAdH,IACAC,KAAKC,WAAWC,UAAY,iCAGpCL,aAAaJ,SAAQ,SAACW,GAClBA,EAAGnB,iBAAiB,QAASa,iBAKjC,IAAMO,KAAOxB,SAASU,iBAAiB,iBACnCe,aAAezB,SAASU,iBAAiB,kBAkB7C,SAASgB,eACL,IAAMC,EAAM3B,SAAS4B,eAAe,UAEhCT,KAAKU,SAAW,GAAIF,EAAItB,UAAUC,IAAI,iBACrCqB,EAAItB,UAAUE,OAAO,iBAK9B,SAASuB,WACL,IAAMA,EAAW9B,SAAS4B,eAAe,aAErCT,KAAKU,SAAW,IAAKC,EAASzB,UAAUC,IAAI,eAC3CwB,EAASzB,UAAUE,OAAO,eA9BnCiB,KAAKZ,SAAQ,SAACmB,GACVA,EAAI3B,iBAAiB,SAAS,WAC1B,IAAM4B,EAAShC,SAASC,cAAc8B,EAAIE,QAAQD,QAElDP,aAAab,SAAQ,SAACsB,GAClBA,EAAQ7B,UAAUE,OAAO,yBAE7ByB,EAAO3B,UAAUC,IAAI,sBAErBkB,KAAKZ,SAAQ,SAACmB,GACVA,EAAI1B,UAAUE,OAAO,yBAEzBwB,EAAI1B,UAAUC,IAAI,4BAW1B6B,OAAO/B,iBAAiB,SAAUsB,cASlCS,OAAO/B,iBAAiB,SAAU0B,UAGlC,IAAMM,YAAcpC,SAAS4B,eAAe,gBACtCS,UAAY,aACZC,UAAY,UAGZC,cAAgBC,aAAaC,QAAQ,kBACrCC,aAAeF,aAAaC,QAAQ,iBAGpCE,gBAAkB,WAAA,OACpB3C,SAAS4C,KAAKvC,UAAUwC,SAASR,WAAa,OAAS,SACrDS,eAAiB,WAAA,OACnBV,YAAY/B,UAAUwC,SAASP,WAAa,WAAa,WAGzDC,gBAEAvC,SAAS4C,KAAKvC,UAA4B,SAAlBkC,cAA2B,MAAQ,UACvDF,WAEJD,YAAY/B,UAA2B,aAAjBqC,aAA8B,MAAQ,UACxDJ,YAKRF,YAAYhC,iBAAiB,SAAS,WAElCJ,SAAS4C,KAAKvC,UAAU0C,OAAOV,WAC/BD,YAAY/B,UAAU0C,OAAOT,WAE7BE,aAAaQ,QAAQ,iBAAkBL,mBACvCH,aAAaQ,QAAQ,gBAAiBF","file":"script.js","sourcesContent":["/////to hide or show the menu\r\n\r\nconst headernav = document.querySelector('.header__nav'),\r\n    headertoggle = document.querySelector('.header__toggle'),\r\n    headerclose = document.querySelector('.header__close');\r\n\r\nif (headertoggle) {\r\n    headertoggle.addEventListener('click', () => {\r\n        headernav.classList.add('show_menu');\r\n    });\r\n}\r\n\r\nif (headerclose) {\r\n    headerclose.addEventListener('click', () => {\r\n        headernav.classList.remove('show_menu');\r\n    });\r\n}\r\n//////pour enlever le menu de navigation lorsqu'on clique sur un headerlink\r\n\r\nconst headerlink = document.querySelectorAll('.header__link');\r\n\r\nfunction removemenu() {\r\n    headernav.classList.remove('show_menu');\r\n}\r\nheaderlink.forEach((n) => n.addEventListener('click', removemenu));\r\n\r\n///////////////////////////////////////////////////////////\r\n// pour les listes déroulantes de skills\r\nlet i;\r\nconst skillsContainer = document.getElementsByClassName('skill__container'),\r\n    skillsHeader = document.querySelectorAll('.skills__header');\r\n\r\nfunction toggleSkills() {\r\n    let itemClass = this.parentNode.className;\r\n    for (i = 0; i < skillsContainer.length; i++) {\r\n        skillsContainer[i].className = 'skill__container skills__close';\r\n    }\r\n    if (itemClass === 'skill__container skills__close') {\r\n        this.parentNode.className = 'skill__container skills__open';\r\n    }\r\n}\r\nskillsHeader.forEach((el) => {\r\n    el.addEventListener('click', toggleSkills);\r\n});\r\n\r\n///////////////////////////////////////////////////////////\r\n// pour gérer la timeline au niveau de expérience\r\nconst tabs = document.querySelectorAll('[data-target]'),\r\n    tableContent = document.querySelectorAll('[data-content]');\r\ntabs.forEach((tab) => {\r\n    tab.addEventListener('click', () => {\r\n        const target = document.querySelector(tab.dataset.target);\r\n\r\n        tableContent.forEach((tabcont) => {\r\n            tabcont.classList.remove('experience__active');\r\n        });\r\n        target.classList.add('experience__active');\r\n\r\n        tabs.forEach((tab) => {\r\n            tab.classList.remove('experience__active');\r\n        });\r\n        tab.classList.add('experience__active');\r\n    });\r\n});\r\n\r\n/*==================== CHANGE BACKGROUND HEADER ====================*/\r\nfunction scrollHeader() {\r\n    const nav = document.getElementById('header');\r\n    // When the scroll is greater than 200 viewport height, add the scroll-header class to the header tag\r\n    if (this.scrollY >= 80) nav.classList.add('scroll-header');\r\n    else nav.classList.remove('scroll-header');\r\n}\r\nwindow.addEventListener('scroll', scrollHeader);\r\n\r\n/*==================== SHOW SCROLL TOP ====================*/\r\nfunction scrollUp() {\r\n    const scrollUp = document.getElementById('scroll-up');\r\n    // When the scroll is higher than 560 viewport height, add the show-scroll class to the a tag with the scroll-top class\r\n    if (this.scrollY >= 560) scrollUp.classList.add('show-scroll');\r\n    else scrollUp.classList.remove('show-scroll');\r\n}\r\nwindow.addEventListener('scroll', scrollUp);\r\n\r\n/*==================== DARK LIGHT THEME ====================*/\r\nconst themeButton = document.getElementById('theme-button');\r\nconst darkTheme = 'dark-theme';\r\nconst iconTheme = 'uil-sun';\r\n\r\n// Previously selected topic (if user selected)\r\nconst selectedTheme = localStorage.getItem('selected-theme');\r\nconst selectedIcon = localStorage.getItem('selected-icon');\r\n\r\n// We obtain the current theme that the interface has by validating the dark-theme class\r\nconst getCurrentTheme = () =>\r\n    document.body.classList.contains(darkTheme) ? 'dark' : 'light';\r\nconst getCurrentIcon = () =>\r\n    themeButton.classList.contains(iconTheme) ? 'uil-moon' : 'uil-sun';\r\n\r\n// We validate if the user previously chose a topic\r\nif (selectedTheme) {\r\n    // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark\r\n    document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](\r\n        darkTheme\r\n    );\r\n    themeButton.classList[selectedIcon === 'uil-moon' ? 'add' : 'remove'](\r\n        iconTheme\r\n    );\r\n}\r\n\r\n// Activate / deactivate the theme manually with the button\r\nthemeButton.addEventListener('click', () => {\r\n    // Add or remove the dark / icon theme\r\n    document.body.classList.toggle(darkTheme);\r\n    themeButton.classList.toggle(iconTheme);\r\n    // We save the theme and the current icon that the user chose\r\n    localStorage.setItem('selected-theme', getCurrentTheme());\r\n    localStorage.setItem('selected-icon', getCurrentIcon());\r\n});\r\n"]}